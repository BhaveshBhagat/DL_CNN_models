# -*- coding: utf-8 -*-
"""CAT_DOG_CNN_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwI9y0NpGYx9VNyZfqosaAnrRjiqzevW
"""

import keras
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

#below commented code for Image generation using ImageDataGenerator
'''
datagenrator = ImageDataGenerator(rotation_range=40,width_shift_range=0.2,
                                  height_shift_range=0.2,shear_range=0.2,
                                  zoom_range=0.2,horizontal_flip = True,
                                  fill_mode = 'nearest')
img = load_img('/content/drive/My Drive/Colab Notebook/Imges_dataset/Cat/cat5.jpg')

x = img_to_array(img)
x = x.reshape((1,) + x.shape)

i=0

for batch in datagenrator.flow(x ,batch_size=1, save_to_dir='/content/drive/My Drive/Colab Notebook/Imges_dataset/Cat',
                               save_prefix='Cat' , save_format='jpg'):
   i+= 1
   if i>30:
     break'''

import tensorflow as tf
print(tf.__version__)

!pip install keras-tuner

import tensorflow as tf
from tensorflow import keras
import numpy as np
print(tf.__version__)

import os
import cv2
import pandas as pd
folders = os.listdir('/content/drive/My Drive/Colab Notebook/Imges_dataset')
labels = []
images = []

for folder in folders:
   label = folder
   training_image_path = '/content/drive/My Drive/Colab Notebook/Imges_dataset/'+folder

   for image in os.listdir(training_image_path):
       image_path = training_image_path+'/'+image
       training_images = cv2.imread(image_path)
       images.append(image_path)
       '''if label == 'Dog':
          labels.append(1)
       else:
          labels.append(0)'''
       labels.append(label)    

pictures = pd.DataFrame({'images': images,
                          'label': labels    })

Image_width = 128
Image_height = 128
Image_size = (Image_width , Image_height)
Image_channels = 3

from keras.models import Sequential
from keras.layers import Conv2D , MaxPooling2D , Dropout , Flatten ,Dense , Activation , BatchNormalization

model = Sequential()

model.add(Conv2D(32,(3,3),activation='relu',input_shape=(Image_width,Image_height,Image_channels)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(2,activation='softmax'))

model.compile(loss='categorical_crossentropy',
  optimizer='rmsprop',metrics=['accuracy'])

model.summary()

from sklearn.model_selection import train_test_split
train_df,validate_df = train_test_split(pictures,test_size=0.20,
  random_state=42)

train_df = train_df.reset_index(drop=True)
validate_df = validate_df.reset_index(drop=True)
total_train=train_df.shape[0]
total_validate=validate_df.shape[0]
batch_value=15
validate_df

train_datagen = ImageDataGenerator(rotation_range=15,
                                rescale=1./255,
                                shear_range=0.1,
                                zoom_range=0.2,
                                horizontal_flip=True,
                                width_shift_range=0.1,
                                height_shift_range=0.1
                                )

train_generator = train_datagen.flow_from_dataframe(train_df ,directory=None,
                                              x_col='images' , y_col='label',
                                              target_size = Image_size,
                                              class_mode = 'categorical',
                                              batch_size = batch_value )

validation_datagen = ImageDataGenerator(rescale=1./255)
validation_generator = validation_datagen.flow_from_dataframe(
    validate_df, 
    directory=None, 
    x_col='images',
    y_col='label',
    target_size=Image_size,
    class_mode='categorical',
    batch_size=batch_value)

from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
earlystop = EarlyStopping(patience = 10)
learning_rate_reduction = ReduceLROnPlateau(monitor = 'val_acc',patience = 2,verbose = 1,factor = 0.5,min_lr = 0.00001)
callbacks = [earlystop , learning_rate_reduction]


epochs=2
history = model.fit_generator(
    train_generator, 
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=total_validate//batch_value,
    steps_per_epoch=total_train//batch_value,
    callbacks=callbacks
)

test_filenames = os.listdir("/content/drive/My Drive/Colab Notebook/Imges_dataset/Dog")
test_df = pd.DataFrame({
    'filename': test_filenames
})
test_df = test_df.reset_index(drop=True)
nb_samples = test_df.shape[0]

#predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples/batch_size))

model.save("/content/drive/My Drive/Colab Notebook/model1_catsVSdogs_10epoch.h5")

from PIL import Image
import numpy as np
im=Image.open("/content/drive/My Drive/Colab Notebook/test_folder/dog5.jpg")
im=im.resize(Image_size)
im=np.expand_dims(im,axis=0)
im=np.array(im)
im=im/255
pred=model.predict_classes([im])[0]
print(pred)

!pip install flask-ngrok

from flask import Flask , render_template , request, flash , url_for , redirect
import numpy as np
from werkzeug.utils import secure_filename
import os
from PIL import Image
import numpy as np
from flask_ngrok import run_with_ngrok
from tensorflow.keras.models import load_model
model = load_model('/content/drive/My Drive/Colab Notebook/model1_catsVSdogs_10epoch.h5')


app  = Flask(__name__ , template_folder='.')
run_with_ngrok(app)
app.secret_key = "secret key"
UPLOAD_FOLDER = '/content/drive/My Drive/Colab Notebook/test_folder/'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
filename = ''
@app.route('/' , methods=['POST','GET'])
def home():
    global filename
    if request.method == 'POST':
        img = request.files['file']
        img.save(os.path.join(app.config['UPLOAD_FOLDER'] ,secure_filename(img.filename)))
        filename = img.filename
        flash('Image successfully uploaded and displayed')
        return render_template('web_UI.html',filename = img.filename)

    return render_template('web_UI.html')

@app.route('/display/<filename>')
def display_image(filename):
  return redirect(url_for('static', filename=UPLOAD_FOLDER+'/' + filename), code=301)

@app.route('/result' , methods=['POST','GET'])
def result():
   if request.method == 'POST':
        fileLoc = UPLOAD_FOLDER+'/'+filename
        im=Image.open(fileLoc)
        
        im=im.resize(Image_size)
        im=np.expand_dims(im,axis=0)
        im=np.array(im)
        im=im/255
        
        pred=model.predict_classes([im])[0]
        if pred == 1:
          outcome = 'Its a DOG'
        else:
          outcome = 'Its a CAT'        
        return render_template('web_UI.html' , result = outcome)
app.run()

